import dotenv from 'dotenv';
dotenv.config(); // Always keep these lines at the top of this file

import logger from './utils/logger.util';

import express, { Express, Request, Response, Router } from 'express';
import swaggerUi from 'swagger-ui-express';

import loggingMiddleware from './middlewares/logging.middleware';
import bodyParser from 'body-parser';
import { errorMiddleware, notFoundMiddleware } from './middlewares/error.middleware';

import { RegisterRoutes } from './routes/routes';
import SERVER_CONFIG from './config/server.config';
import DB_CONFIG from './config/db.config';

class Server {
    private readonly app: Express;
    private readonly apiRouter: Router;

    constructor() {
        this.app = express();
        this.apiRouter = Router();
        this.loadMiddleware();
    }

    /**
     * Middleware includes:
     *      - Logging requests and responses
     *      - Request parsing
     *      - API Routes
     *      - OpenAPI Specification
     *      - Error Handling
     * NOTE: The order in which the middleware is declared is very important to
     * consider when adding new middlewares.
     */
    private loadMiddleware(): void {
        // Logging requests
        this.app.use(loggingMiddleware);

        // Parsing requests
        this.app.use(bodyParser.urlencoded({ extended: false }));
        this.app.use(bodyParser.json());

        // Loading routes
        this.loadRoutesAndServeDocs();

        // Error handling
        this.app.use(notFoundMiddleware);
        this.app.use(errorMiddleware);
    }

    /**
     * TSOA will generate an OpenAPI specification and a routes file which
     * contains the RegisterRoutes function.
     * RegisterRoutes will be used to include all generated routes within this
     * app.
     * The swagger.json generated by tsoa will be used to generate documentation
     * of all api routes.
     *
     * If a developer manually creates routes instead of using tsoa, they will have
     * to also manually add them to the api router at the end of this function
     * for the new routes to be used by this app.
     */
    private loadRoutesAndServeDocs(): void {
        this.app.use('/api', this.apiRouter);

        RegisterRoutes(this.app);

        this.apiRouter.use('/docs', swaggerUi.serve, async (_req: Request, res: Response) => {
            return res.send(swaggerUi.generateHTML(await import('./routes/swagger.json')));
        });

        // Add your custom routers below
        // Ex: this.apiRouter.use('/users', userRouter);
    }

    /**
     * Starts the server at the configured port/host and starts a
     * connection to the  database.
     */
    public start(): void {
        this.app
            .listen(SERVER_CONFIG.port, () => {
                logger.info(`Listening @ ${SERVER_CONFIG.url}`);
                logger.info(`API Docs @ ${SERVER_CONFIG.url}/docs`);

                DB_CONFIG.initializeConnection();
            })
            .on('error', (err) => {
                logger.error(`Failed to start server: `, err);
            });
    }
}

new Server().start();
